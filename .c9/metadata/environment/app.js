{"changed":true,"filter":false,"title":"app.js","tooltip":"/app.js","value":"\nvar express= require(\"express\");\nvar app=express();\nvar bodyParser=require(\"body-parser\");\nvar mongoose= require(\"mongoose\");\nvar passport= require(\"passport\");\nvar LocalStrategy= require(\"passport-local\");\nvar methodOverride = require(\"method-override\");\nvar Cycle  = require(\"./models/cycle\");\nvar Comment  = require(\"./models/comment\");\nvar User= require(\"./models/user\");\nvar seedDB = require(\"./seeds\");\n\nseedDB();\nmongoose.connect(\"mongodb://localhost:27017/buy_cycle\",{useNewUrlParser: true});\napp.use(bodyParser.urlencoded({extended: true}));\napp.set(\"view engine\",\"ejs\");\napp.use(methodOverride(\"_method\"));\n\n\n\n\n\napp.use(express.static(__dirname+\"/public\"))\n\n//PASSPORT CONFIG\napp.use(require(\"express-session\")({\n    secret:\"secrets\",\n    resave: false,\n    saveUnitialized: false\n}));\napp.use(passport.initialize());\napp.use(passport.session());\npassport.use(new LocalStrategy(User.authenticate()));\npassport.serializeUser(User.serializeUser());\npassport.deserializeUser(User.deserializeUser());\n\n\napp.use(function(req, res, next){\n    res.locals.currentUser= req.user;\n    next();\n});\n\n\n\napp.get(\"/\",function(req,res){\n    res.render(\"landing\");\n});\napp.get(\"/cycles/faq\", function(req,res){\n    res.render(\"faq\");\n});\napp.get(\"/cycles/bonus\", function(req,res){\n    res.render(\"bonus\");\n});\n\napp.get(\"/cycles/about\", function(req,res){\n    res.render(\"about\");\n});\napp.get(\"/cycles/contact\", function(req,res){\n    res.render(\"contact\");\n});\n\n\n\n\napp.get(\"/cycles\", function(req,res){ //campgrounds-->cycles\n    //Get all cycles from DB\n    Cycle.find({},function(err, allCycles){\n        if(err){\n            console.log(err);\n        } else{\n           res.render(\"cycles\",{cycles:allCycles, currentUser: req.user}); \n        }\n    });\n        \n});\n\n\n\napp.post(\"/cycles\", function(req,res){\n    var brand= req.body.brand;\n    var model=req.body.model;\n    var date=req.body.date;\n    var city=req.body.city;\n    var state=req.body.state;\n    var phone=req.body.phone;\n    var mail=req.body.mail;\n    var war=req.body.war;\n    var descrip=req.body.descrip;\n    var image=req.body.image;\n    var author = {\n        id: req.user._id,\n        username: req.user.username\n    };\n    var newCycle= {brand:brand, model:model, date:date, city:city, state:state, phone:phone, mail:mail, war:war, descrip:descrip,image:image, author:author};\n    //Create a new cycle and save to db\n    Cycle.create(newCycle,function(err, newlyCreated){\n        if(err){\n            console.log(err);\n        } else{\n            res.redirect(\"/cycles\");\n        }\n    });\n    \n    \n});\n//show new form\napp.get(\"/cycles/new\", isLoggedIn, function(req, res){\n    res.render(\"new.ejs\");\n});\n\n\n// remove from here\n\n\n\napp.get(\"/cycles/:id\", function(req,res){\n    Cycle.findById(req.params.id).populate(\"comments\").exec( function(err, foundCycle){\n        if(err){\n            console.log(err);\n        } else{\n            console.log(foundCycle);\n            res.render(\"show\", {cycles:foundCycle});\n        }\n    });\n    \n});\n\n\napp.get(\"/show\",function(req,res){\n    res.render(\"show\");\n});\n\n\n//edit cycles\napp.get(\"/cycles/:id/edit\", checkCycleOwnership, function(req,res){\n    Cycle.findById(req.params.id, function(err, foundCycle){\n        if(err){\n            console.log(err);\n        }\n        res.render(\"edit\", {cycle:foundCycle});\n    });\n     \n});\n\napp.put(\"/cycles/:id\", checkCycleOwnership, function(req, res){\n    Cycle.findByIdAndUpdate(req.params.id, req.body.cycles, function(err,updatedCycle){\n        if(err){\n            res.redirect(\"cycles\");\n        } else{\n            res.redirect(\"/cycles/\" + req.params.id);\n        }\n    });\n});\n\n//delete cycle\napp.delete(\"/cycles/:id\", checkCycleOwnership, function(req,res){\n    Cycle.findByIdAndRemove(req.params.id, function(err){\n        if(err){\n            res.redirect(\"/cycles\");\n        } else{\n            res.redirect(\"/cycles\");\n        }\n    });\n});\n\n\n\napp.get(\"/cycles/:id/comments/new\", isLoggedIn,  function(req,res){\n    Cycle.findById(req.params.id, function(err, cycle){\n        if(err){\n            console.log(err);\n        } else{\n            res.render(\"comments/new\",{cycles:cycle});\n        }\n    });\n});\n\napp.post(\"/cycles/:id/comments/\", isLoggedIn, function(req, res){\n    //lookup cycles using ID\n    Cycle.findById(req.params.id, function(err, cycles){\n        if(err){\n            console.log(err);\n            res.redirect(\"/cycles\");\n        } else{\n            Comment.create(req.body.comment, function(err,comment){\n                if(err){\n                    console.log(err);\n                } else{\n                    //comment.author.id= req.user._id;\n                    //comment.author.username= req.user.username;\n                    comment.save;\n                    cycles.comments.push(comment);\n                    cycles.save();\n                    res.redirect('/cycles/'+ cycles._id);\n                }\n            });\n        }\n    });\n        \n});\n\n//comment edit\napp.get(\"/cycles/:id/comments/:comment_id/edit\", function(req,res){\n    Comment.findById(req.params.comment_id, function(err, foundComment){\n        if(err){\n            res.redirect(\"back\");\n        } else{\n            res.render(\"comments/edit\", {cycles_id: req.params.id, comment: foundComment});\n        }\n    });\n    \n});\n\n//comment update\napp.put(\"/cycles/:id/comments/:comment_id\", function(req,res){\n    Comment.findByIdAndUpdate(req.params.comment_id, req.body.comment, function(err, updatedComment){\n        if(err){\n            res.redirect(\"back\");\n        } else{\n            res.redirect(\"/cycles/\" + req.params.id);\n        }\n    });\n});\n\n//delete comment\napp.delete(\"/cycles/:id/comments/:comment_id\", function(req, res){\n    Comment.findByIdAndRemove(req.params.comment_id, function(err){\n        if(err){\n            res.redirect(\"back\");\n        } else{\n            res.redirect(\"/cycles/\" + req.params.id);\n        }\n    });\n});\n\n// to here after adding DB\n\napp.get(\"/signup\",function(req,res){\n    res.render(\"signup\");\n});\n\napp.post(\"/signup\", function(req, res){\n    var newUser= new User({username: req.body.username});\n    User.register(newUser, req.body.password, function(err, user){\n        if(err){\n            console.log(err);\n            return res.render(\"register\");\n        }\n        passport.authenticate(\"local\")(req, res, function(){\n            res.redirect(\"/cycles\");\n        });\n    });\n});\n\napp.get(\"/login\",function(req,res){\n    \n    res.render(\"login\");\n});\n\napp.post(\"/login\", passport.authenticate(\"local\",\n{successRedirect: \"/cycles\",\nfailureRedirect: \"cycles/login\"\n    \n}), function(req,res){\n    \n});\n\napp.get(\"/logout\", function(req,res){\n    req.logout();\n    res.redirect(\"/cycles\");\n});\n\nfunction isLoggedIn(req, res, next){\n    if(req.isAuthenticated()){\n        return next();\n    }\n    res.redirect(\"/login\");\n}\n\n\nfunction checkCycleOwnership(req, res, next){\n    if(req.isAuthenticated()){\n    Cycle.findById(req.params.id, function(err, foundCycle){\n        if(err){\n            res.redirect(\"back\");\n        } else{\n            if(foundCycle.author.id.equals(req.user._id)){\n                next();\n                //res.render(\"edit\", {cycles:foundCycle});\n            } else{\n                res.redirect(\"back\");\n            }\n            \n        }\n    });\n    } else{\n        res.redirect(\"back\");\n    }\n    \n}\n\nfunction checkCommentOwnership(req, res, next){\n    if(req.isAuthenticated()){\n    Comment.findById(req.params.comment_id, function(err, foundComment){\n        if(err){\n            res.redirect(\"back\");\n        } else{\n            if(foundComment.author.id.equals(req.user._id)){\n                next();\n                //res.render(\"edit\", {cycles:foundCycle});\n            } else{\n                res.redirect(\"back\");\n            }\n            \n        }\n    });\n    } else{\n        res.redirect(\"back\");\n    }\n    \n}\n\n\napp.get(\"/:user_id\", function(req, res) {\n    User.findById(req.params.user_id, function(err, foundUser) {\n        if(err) {\n            //req.flash(\"error\", \"Something went wrong\");\n            return res.redirect(\"back\");\n        } else {\n            // Find out the campgrounds (if any) that this user has created\n            Cycle.find().where('author.id').equals(foundUser._id).exec(function(err, cycles) {\n                if(err) {\n                    req.flash(\"error\", \"Something went wrong\");\n                    return res.redirect(\"back\");\n                }\n                res.render(\"profile\", { user: foundUser, cycles: cycles});\n            });\n        }\n    })\n});\n\n\n\napp.listen(process.env.PORT, process.env.IP, function(){\n    console.log(\" Server has started\");\n});","undoManager":{"mark":-2,"position":0,"stack":[[{"start":{"row":18,"column":0},"end":{"row":19,"column":0},"action":"remove","lines":["",""],"id":2},{"start":{"row":18,"column":0},"end":{"row":19,"column":0},"action":"remove","lines":["",""]},{"start":{"row":18,"column":0},"end":{"row":19,"column":0},"action":"remove","lines":["",""]},{"start":{"row":18,"column":0},"end":{"row":19,"column":0},"action":"remove","lines":["",""]}]]},"ace":{"folds":[],"scrolltop":36,"scrollleft":0,"selection":{"start":{"row":262,"column":3},"end":{"row":262,"column":3},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":0},"timestamp":1572607055546}